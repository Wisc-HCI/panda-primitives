#!/usr/bin/env python
import rospy
import signal
import sys
import math
import tf
import PyKDL

from geometry_msgs.msg import Twist,Pose,PoseStamped
from std_msgs.msg import String
from nav_msgs.msg import Path
from relaxed_ik.msg  import EEPoseGoals,JointAngles
from sensor_msgs.msg import JointState

import numpy as np 

REFERENCE_FRAME='rel_ik_zero'

class Ik_Wrapper(object):
    def __init__(self):
        self._tl = tf.TransformListener()
        self._br = tf.TransformBroadcaster()

        self._goal_pub = rospy.Publisher("/relaxed_ik/ee_pose_goals", EEPoseGoals, queue_size=1)
        self._vel_pub = rospy.Publisher("/r_ik_wrapper/joint_vel",JointAngles,queue_size=5)

        rospy.sleep(1.) # sleep a bit to make sure the TF cache is filled
        self._twist_sub = rospy.Subscriber("/planner/cart_vel",Twist, self.on_velocity)
        self._joint_sub = rospy.Subscriber("/viz/joint_states",JointState, self.on_state)
        self._solution_sub = rospy.Subscriber("/relaxed_ik/joint_angle_solutions",JointAngles, self.on_solution)
        self._current_joint = None
        self._stop = False

    def run(self):
        rospy.spin()

    def signal_handler(self, signal, frame):
        sys.exit(0)

    def get_lin_magnitude(self, vel):
        return np.sqrt(vel.linear.x**2 + vel.linear.y**2 + vel.linear.z**2)

    def get_ang_magnitude(self, vel):
        return np.sqrt(vel.angular.x**2 + vel.angular.y**2 + vel.angular.z**2)

    def on_state(self, msg):
        self._current_joint = list(msg.position)[0:7]

    def on_solution(self,msg):
        desired_joint = list(msg.angles.data)
        factor = 1
        v = JointAngles()
        for d,c in zip(desired_joint,self._current_joint):
            if self._stop:
                v.angles.data.append(0)
            else:
                v.angles.data.append((d-c)/factor)
        self._vel_pub.publish(v)

    def on_velocity(self, msg):
        vel = msg
        if self.get_lin_magnitude(vel) < .00000001 and self.get_ang_magnitude(vel) < .00000001:
            print("vel 0 requested")
            self._stop = True
            return
        self._stop = False
        ee_frame = 'sim_panda_gripper'
        (trans,rot) = self._tl.lookupTransform(REFERENCE_FRAME, ee_frame, rospy.Time(0))

        factor = 2
        trans[0] += vel.linear.x/factor
        trans[1] += vel.linear.y/factor
        trans[2] += vel.linear.z/factor

        angle = list(tf.transformations.euler_from_quaternion(rot))

        angle[0] += vel.angular.x/factor
        angle[1] += vel.angular.y/factor
        angle[2] += vel.angular.z/factor
        rot = list(tf.transformations.quaternion_from_euler(angle[0],angle[1],angle[2]))
        goal = EEPoseGoals()
        goal.header.frame_id = REFERENCE_FRAME
        pose = Pose()
        pose.position.x=trans[0]
        pose.position.y=trans[1]
        pose.position.z=trans[2]
        pose.orientation.x=rot[0]
        pose.orientation.y=rot[1]
        pose.orientation.z=rot[2]
        pose.orientation.w=rot[3]
        goal.ee_poses.append(pose)
        self._goal_pub.publish(goal)
        self._br.sendTransform(trans, rot, rospy.Time.now(), "target",REFERENCE_FRAME)

if __name__ == "__main__":
    rospy.init_node("ik_wrapper")
    ik_wrapper = Ik_Wrapper()
    signal.signal(signal.SIGINT, ik_wrapper.signal_handler)
    ik_wrapper.run()

