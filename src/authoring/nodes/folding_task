#!/usr/bin/env python3
import numpy as np
import math
import rospy
import signal
import sys
from geometry_msgs.msg import Pose, Quaternion, PoseStamped, TransformStamped
from authoring_msgs.msg import POI, POIArray
import tf2_ros
from std_msgs.msg import ColorRGBA
from visualization_msgs.msg import Marker
import copy
from tf.transformations import quaternion_from_euler as qfe

REFERENCE_FRAME='panda_link0'

class MeshPub(object):
    def __init__(self):
        self._marker_pub = rospy.Publisher("/world/meshes", Marker, queue_size=1)
        self._pois_pub = rospy.Publisher("/pois",POIArray,queue_size=1,latch=True)
        self._array=POIArray()
        self._br = tf2_ros.TransformBroadcaster()
        self._init_box = False
    
    #from https://stackoverflow.com/questions/29643352/converting-hex-to-rgb-value-in-python
    def get_color(self, string, alpha):
        color = ColorRGBA()
        string=string.lstrip('#')
        (r,g,b) = tuple(int(string[i:i+2], 16)/255. for i in (0, 2, 4))
        color.r = r
        color.g = g
        color.b = b
        color.a=alpha
        return color

    def publish_mesh(self, pose, name, i, color, alpha):
        marker = Marker()
        marker.header.frame_id = REFERENCE_FRAME
        marker.pose = pose
        marker.ns = name
        marker.id = i
        scale = 1
        marker.scale.x=scale
        marker.scale.y=scale
        marker.scale.z=scale
        marker.color = self.get_color(color, alpha)
        marker.type = marker.MESH_RESOURCE
        marker.mesh_resource = "package://authoring/meshes/"+name+".stl"
        self._marker_pub.publish(marker)

    def quat_from_vect(self,v):
        q = Quaternion()
        q.x=v[0]
        q.y=v[1]
        q.z=v[2]
        q.w=v[3]
        return q

    def init_box(self):
        poi0 = POI()
        poi0.pose.pose.position.x=.3
        poi0.pose.pose.position.y=.0
        poi0.pose.pose.position.z=.0
        poi0.pose.pose.orientation.w=1
        poi0.pose.header.frame_id = "box_origin"
        poi0.type = poi0.EDGE
        poi0.id = 0
        self._array.poi_array.append(poi0)
        poi1 = copy.deepcopy(poi0)
        poi1.pose.pose.position.x=.6
        poi1.pose.pose.position.y=.2
        poi1.id = 1
        self._array.poi_array.append(poi1)
        poi2 = copy.deepcopy(poi0)
        poi2.pose.pose.position.x=.3
        poi2.pose.pose.position.y=.4
        poi2.id = 2
        self._array.poi_array.append(poi2)
        poi3 = copy.deepcopy(poi0)
        poi3.pose.pose.position.x=.0
        poi3.pose.pose.position.y=.2
        poi3.id = 3
        self._array.poi_array.append(poi3)

        self._pois_pub.publish(self._array)

        
    def publish_meshes(self):
        task = 'thread'
        pose = Pose()
        q = qfe(np.pi,np.pi,np.pi/2)
        pose.orientation = self.quat_from_vect(q)
        pose.position.x = .2
        pose.position.y = .3
        pose.position.z = .1
        t = TransformStamped()
        t.header.frame_id = REFERENCE_FRAME
        t.header.stamp = rospy.Time.now()
        t.child_frame_id = "box_origin"
        t.transform.rotation = pose.orientation
        t.transform.translation.x = pose.position.x
        t.transform.translation.y = pose.position.y
        t.transform.translation.z = pose.position.z
        if len(self._array.poi_array) == 0:
            self.init_box()
        self.publish_mesh(pose, 'box_plan', 0, '#696969',1)
        self._br.sendTransform(t)

    def run(self):
        r = rospy.Rate(10)
        while not rospy.is_shutdown():
            self.publish_meshes()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('mesh_pub')
    meshPub = MeshPub()
    signal.signal(signal.SIGINT, meshPub.signal_handler)
    meshPub.run()
