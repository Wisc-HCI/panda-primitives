#!/usr/bin/env python3
import numpy as np
import math
import rospy
import signal
import sys
from geometry_msgs.msg import Pose, Quaternion
from std_msgs.msg import ColorRGBA
from visualization_msgs.msg import Marker

REFERENCE_FRAME='panda_link0'
from tf.transformations import quaternion_from_euler as qfe


class MeshPub(object):
    def __init__(self):
        self._marker_pub = rospy.Publisher("/world/meshes", Marker, queue_size=1)
    
    #from https://stackoverflow.com/questions/29643352/converting-hex-to-rgb-value-in-python
    def get_color(self, string, alpha):
        color = ColorRGBA()
        string=string.lstrip('#')
        (r,g,b) = tuple(int(string[i:i+2], 16)/255. for i in (0, 2, 4))
        color.r = r
        color.g = g
        color.b = b
        color.a=alpha
        return color

    def publish_mesh(self, pose, name, i, color, alpha):
        marker = Marker()
        marker.header.frame_id = REFERENCE_FRAME
        marker.pose = pose
        marker.ns = name
        marker.id = i
        scale = 1
        marker.scale.x=scale
        marker.scale.y=scale
        marker.scale.z=scale
        marker.color = self.get_color(color, alpha)
        marker.type = marker.MESH_RESOURCE
        marker.mesh_resource = "package://authoring/meshes/"+name+".stl"
        self._marker_pub.publish(marker)

    def quat_from_vect(self,v):
        q = Quaternion()
        q.x=v[0]
        q.y=v[1]
        q.z=v[2]
        q.w=v[3]
        return q
        
    def publish_meshes(self):
        task = 'thread'
        pose = Pose()
        q = qfe(np.pi/2,np.pi,0)
        pose.orientation = self.quat_from_vect(q)
        pose.position.x = .4
        pose.position.y = -.6
        self.publish_mesh(pose, 'panel', 0, '#696969',1)
        q = qfe(-np.pi/2,np.pi/2,0)
        pose.orientation = self.quat_from_vect(q)
        pose.position.x = .2
        pose.position.y = -.6
        pose.position.z = .6
        self.publish_mesh(pose, task, 1, '#AAAAAA',1)
        pose.position.x = .4
        self.publish_mesh(pose, task, 2, '#AAAAAA',1)
        pose.position.x = .6
        self.publish_mesh(pose, task, 3, '#AAAAAA',1)

    def run(self):
        r = rospy.Rate(10)
        while not rospy.is_shutdown():
            self.publish_meshes()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('mesh_pub')
    meshPub = MeshPub()
    signal.signal(signal.SIGINT, meshPub.signal_handler)
    meshPub.run()
