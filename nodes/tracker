#!/usr/bin/env python
import numpy as np
import math
import rospy
import signal
import sys
from std_msgs.msg import String, ColorRGBA
from visualization_msgs.msg import Marker
from geometry_msgs.msg import PoseStamped, Point, Pose, PoseArray, Quaternion, Twist, TransformStamped
from authoring_msgs.msg import Action, Command, POI, POIArray
import tf
import tf2_ros
import copy
from tf.transformations import quaternion_from_euler

REFERENCE_FRAME='panda_link0'
CAMERA_FRAME='external_rgb_camera_link'

class Tracker(object):
    def __init__(self):
        self._tfBuffer = tf2_ros.Buffer()
        self._tl = tf2_ros.TransformListener(self._tfBuffer)
        rospy.sleep(0.5) # sleep a bit to make sure the TF cache is filled

        self._br = tf2_ros.TransformBroadcaster()
        rospy.sleep(.5)

        self._poi_pub = rospy.Publisher("/world_state/pois", POIArray, queue_size=1, latch=True)
        self._marker_pub = rospy.Publisher("/viz/meshes", Marker, queue_size=1)

        self._init_pois = None
        self._sim_pois = None
        self._estimated_pois = None

        self._grasped_object = None
        self._sim = False

        self._cmd = None
        self._tf_array = []

        self._poi_sub = rospy.Subscriber("pois", POIArray, self.on_pois, queue_size = 1)
        self._gui_sub = rospy.Subscriber("parser/command", Command, self.on_command, queue_size = 1)
        self._event_sub = rospy.Subscriber("event", String, self.on_event, queue_size = 1)


    def on_pois(self, msg):
        print "Got poi"
        if self._init_pois is not None:
            return
        self._init_pois = []
        for p in msg.poi_array:
            self._init_pois.append(p)
        self._sim_pois = copy.deepcopy(self._init_pois)
        self._estimated_pois = copy.deepcopy(self._sim_pois)
        self.publish_pois()

    def on_command(self, msg):
        self._cmd = msg

    def on_event(self, msg):
        event = msg.data.split(';')
        if event[0] == "start_sim":
            self._sim = True
        if event[0] == "grasped":
            self._grasped_object = event[1]
            print "grasping "+self._grasped_object
        if event[0] == "released":
            self._grasped_object = None
        if event[0] == "motion_finished":
            if self._sim:
                self._sim = False
                self._sim_pois = copy.deepcopy(self._estimated_pois)
            else:
                self._estimated_pois = copy.deepcopy(self._sim_pois)
            
            self.publish_pois()

    def publish_pois(self):
        self._tf_array = []
        print "N pois"
        print len(self._estimated_pois)
        for poi in self._estimated_pois:
            t = TransformStamped()
            t.header.frame_id = REFERENCE_FRAME
            t.child_frame_id = self.get_name(poi)
            t.transform.translation.x=poi.pose.pose.position.x
            t.transform.translation.y=poi.pose.pose.position.y
            t.transform.translation.z=poi.pose.pose.position.z
            t.transform.rotation.x=poi.pose.pose.orientation.x
            t.transform.rotation.y=poi.pose.pose.orientation.y
            t.transform.rotation.z=poi.pose.pose.orientation.z
            t.transform.rotation.w=poi.pose.pose.orientation.w
            self._tf_array.append(t)
        msg = POIArray()
        msg.poi_array = copy.copy(self._estimated_pois)
        self._poi_pub.publish(msg)
           
    def get_pose_from_trans(self, t):
        pose = Pose()
        pose.position.x = t.transform.translation.x
        pose.position.y = t.transform.translation.y
        pose.position.z = t.transform.translation.z
        pose.orientation.x = t.transform.rotation.x
        pose.orientation.y = t.transform.rotation.y
        pose.orientation.z = t.transform.rotation.z
        pose.orientation.w = t.transform.rotation.w
        return pose

    def publish_meshes(self):
        if self._sim_pois is None:
            return
        for p in self._sim_pois:
            if self.get_name(p) == self._grasped_object:
                t = self._tfBuffer.lookup_transform(REFERENCE_FRAME, 'sim_end_effector', rospy.Time(0))
                p.pose.header.frame_id = REFERENCE_FRAME
                p.pose.pose = self.get_pose_from_trans(t)
                
            if p.type == p.SCREW:
                self.publish_mesh(p.pose.pose, "screw", p.id, "#a9a9a9",.70)

        self._br.sendTransform(self._tf_array)

    #from https://stackoverflow.com/questions/29643352/converting-hex-to-rgb-value-in-python
    def get_color(self, string, alpha):
        color = ColorRGBA()
        string=string.lstrip('#')
        (r,g,b) = tuple(int(string[i:i+2], 16)/255. for i in (0, 2, 4))
        color.r = r
        color.g = g
        color.b = b
        color.a=alpha
        return color


    def get_name(self, poi):
        name = ""
        if poi.type == poi.SCREW:
            name = "screw"
        if poi.type == poi.HOLE:
            name = "hole"
        if poi.type == poi.PUSHER:
            name = "pusher"
        if poi.type == poi.SCREW_DRIVER:
            name = "screwdriver"
        name += '_' + str(poi.id)
        return name

    def publish_mesh(self, pose, name, i, color, alpha):
        marker = Marker()
        marker.header.frame_id = REFERENCE_FRAME
        marker.pose = copy.deepcopy(pose)
        marker.pose.position.z-=.053
        marker.ns = name
        marker.id = i
        scale = 1
        marker.scale.x=scale
        marker.scale.y=scale
        marker.scale.z=scale
        marker.color = self.get_color(color, alpha)
        marker.type = marker.MESH_RESOURCE
        marker.mesh_resource = "package://authoring/meshes/"+name+".stl"
        self._marker_pub.publish(marker)

    def run(self):
        r = rospy.Rate(20)
        while not rospy.is_shutdown():
            self.publish_meshes()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('state_tracker')
    tracker = Tracker()
    signal.signal(signal.SIGINT, tracker.signal_handler)
    tracker.run()
