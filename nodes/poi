#!/usr/bin/env python
import numpy as np
import math
import rospy
import signal
import sys
from geometry_msgs.msg import PoseStamped, PoseArray, Quaternion, TransformStamped
from authoring_msgs.msg import POI, POIArray
import tf
import tf2_ros
import copy

REFERENCE_FRAME='panda_link0'

class Poi(object):
    def __init__(self):
        self._br = tf2_ros.TransformBroadcaster()
        self._pois_pub = rospy.Publisher("/pois",POIArray,queue_size=1,latch=True)
        self._array=POIArray()
        self._tf_array = []
        self.init_pois()
        
    def init_pois(self):
        #POI1
        poi_init = POI()
        poi_init.pose.pose.position.x=.555
        poi_init.pose.pose.position.y=-.252
        poi_init.pose.pose.position.z=.065
        poi_init.pose.pose.orientation.w=1
        poi_init.pose.header.frame_id = REFERENCE_FRAME
        poi_init.type = poi_init.SCREW
        poi_init.id = 0
        self._array.poi_array.append(poi_init)
        for i in range(4):
            poi = copy.deepcopy(poi_init)
            poi.pose.pose.position.x+=(i+1)*0.0375
            poi.pose.pose.position.y-=(i+1)*0.001
            poi.id = i+1
            self._array.poi_array.append(poi)
        for i in range(5):
            for j in range(5):
                poi = copy.deepcopy(poi_init)
                poi.pose.pose.position.x+=-.197+.036*i
                poi.pose.pose.position.y+=-.001+.04*j
                poi.pose.pose.position.z+=.003
                poi.id = j+5*i
                poi.type = poi.HOLE
                self._array.poi_array.append(poi)
        off_x=-.14
        off_y=.50
        off_z=-.003
        for i in range(12):
            poi = copy.deepcopy(poi_init)
            poi.pose.pose.position.x += off_x + .0825*np.cos(i*np.pi/6)
            poi.pose.pose.position.y += off_y + .0825*np.sin(i*np.pi/6)
            poi.pose.pose.position.z += off_z
            poi.id = i
            poi.type = poi.PUSHER
            self._array.poi_array.append(poi)

        poi = copy.deepcopy(poi_init)
        poi.type = poi.SCREW_DRIVER
        poi.pose.pose.position.x += .19
        poi.pose.pose.position.z += .094
        self._array.poi_array.append(poi)
        self._pois_pub.publish(self._array)
        for poi in self._array.poi_array:
            t = TransformStamped()
            t.header.frame_id = REFERENCE_FRAME
            t.child_frame_id = self.get_name(poi)
            t.transform.translation.x=poi.pose.pose.position.x
            t.transform.translation.y=poi.pose.pose.position.y
            t.transform.translation.z=poi.pose.pose.position.z
            t.transform.rotation.x=poi.pose.pose.orientation.x
            t.transform.rotation.y=poi.pose.pose.orientation.y
            t.transform.rotation.z=poi.pose.pose.orientation.z
            t.transform.rotation.w=poi.pose.pose.orientation.w
            self._tf_array.append(t)


    def get_vect(self, v):
        toreturn = []
        toreturn.append(v.x)
        toreturn.append(v.y)
        toreturn.append(v.z)
        if isinstance(v, Quaternion):
            toreturn.append(v.w)
        return toreturn

    def get_name(self, poi):
        name = ""
        if poi.type == poi.SCREW:
            name = "screw"
        if poi.type == poi.HOLE:
            name = "hole"
        if poi.type == poi.PUSHER:
            name = "pusher"
        if poi.type == poi.SCREW_DRIVER:
            name = "screwdriver"
        name += '_' + str(poi.id)
        return name


    def publish_pois(self):
        self._br.sendTransform(self._tf_array)
        #self._poses_pub.publish(pose_array)


    def run(self):
        r = rospy.Rate(100)
        while not rospy.is_shutdown():
            self.publish_pois()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('poi')
    poi = Poi()
    signal.signal(signal.SIGINT, poi.signal_handler)
    poi.run()
