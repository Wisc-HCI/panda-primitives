#!/usr/bin/env python
import rospy
import signal
import sys
import math
import tf
import PyKDL
import copy
import numpy as np

from geometry_msgs.msg import Twist,Pose,PoseStamped,Quaternion,Vector3
from nav_msgs.msg import Path
from std_msgs.msg import String
from authoring_msgs.msg import Action,Command

REFERENCE_FRAME='panda_link0'
ACTION_PICK=0
ACTION_PLACE=1

class Planner(object):
    def __init__(self):
        self._tl = tf.TransformListener()
        self._br = tf.TransformBroadcaster()
        rospy.sleep(2.5) # sleep a bit to make sure the TF cache is filled
        self._path_pub = rospy.Publisher("/planner/path", Path, queue_size=0)
        self._vel_pub = rospy.Publisher("/planner/cart_vel", Twist, queue_size=5)
        self._command_sub = rospy.Subscriber("/parser/command", Command, self.on_command)
        self._event_pub = rospy.Publisher("/event",String,queue_size = 5)
        self._command_pub = rospy.Publisher("/planner/command", String, queue_size=1)
        self._plan = []
        self._running = False
        self._vel_pub.publish(Twist())
        self._sim = False
        self._integrator = Twist()
        self._freq = 100.

    def add_subaction(self, action):
        rot = tf.transformations.quaternion_from_euler(0,0,0)
        q = Quaternion(rot[0],rot[1],rot[2],rot[3])
        if action.type == action.PICK:
            print "pick"
            move_above = Action()
            move_above.type = move_above.MOVE
            move_above.pose = self._tl.transformPose(REFERENCE_FRAME, action.pose)
            move_above.pose.pose.orientation = q
            move_to = copy.deepcopy(move_above)
            move_above.pose.pose.position.z+=.15
            move_to.pose.pose.position.z-=.005
            grasp = Action()
            grasp.type = grasp.GRASP
            self._plan.append(move_above)
            self._plan.append(move_to)
            self._plan.append(grasp)
            self._plan.append(move_above)
        
        if action.type == action.PLACE:
            print "place"
            move_above = Action()
            move_above.type = move_above.MOVE
            move_above.pose = self._tl.transformPose(REFERENCE_FRAME, action.pose)
            move_above.pose.pose.orientation = q
            move_above.pose.pose.orientation = q
            move_safe = copy.deepcopy(move_above)
            move_safe.pose.pose.position.y = 0
            move_safe.pose.pose.position.z = .5
            move_to = copy.deepcopy(move_above)
            move_above.pose.pose.position.z+=.15
            move_to.pose.pose.position.z+=.05
            release = Action()
            release.type = release.RELEASE
            self._plan.append(move_above)
            self._plan.append(move_to)
            self._plan.append(release)
            self._plan.append(move_safe)
        
        if action.type == action.SCREW:
            print "screw"
            #angle = 3*np.pi/5.
            angle = 1.2*np.pi/2.
            rot = tf.transformations.quaternion_from_euler(0,0,-angle)
            q_plus = Quaternion(rot[0],rot[1],rot[2],rot[3])
            rot = tf.transformations.quaternion_from_euler(0,0,angle)
            q_minus = Quaternion(rot[0],rot[1],rot[2],rot[3])
 
            move_above = Action()
            move_above.type = move_above.MOVE
            move_above.pose = self._tl.transformPose(REFERENCE_FRAME, action.pose)
            move_above.pose.pose.orientation = q
            move_to = copy.deepcopy(move_above)
            move_above.pose.pose.position.z+=.15
            move_to.pose.pose.position.z+=.13

            plus_high = copy.deepcopy(move_above)
            plus_high.pose.pose.orientation = q_plus
            minus_high = copy.deepcopy(move_above)
            minus_high.pose.pose.orientation = q_minus

            plus_low = copy.deepcopy(move_to)
            plus_low.pose.pose.orientation = q_plus
            minus_low = copy.deepcopy(move_to)
            minus_low.pose.pose.orientation = q_minus
            plus_low2 = copy.deepcopy(plus_low)
            plus_low2.pose.pose.position.z-=.003

            minus_low2 = copy.deepcopy(minus_low)
            minus_low2.pose.pose.position.z-=.003

            self._plan.append(move_above)
            self._plan.append(minus_high)
            self._plan.append(minus_low)
            self._plan.append(plus_low)
            self._plan.append(plus_high)
            self._plan.append(minus_high)
            self._plan.append(minus_low2)
            self._plan.append(plus_low2)
            self._plan.append(plus_high)
            self._plan.append(move_above)
        
    def on_command(self,msg):
        print "new command"
        self._plan = []
        current_action_id = 0
        self._type = msg.type
        while len(msg.core_action)>0:
            print len(msg.core_action)
            current_action = []
            for sub_action in msg.core_action:
                if sub_action.id == current_action_id:
                    current_action.append(sub_action)
            current_action = sorted(current_action,key=lambda action: action.type)
            for sub_action in current_action:
                msg.core_action.remove(sub_action)
                self.add_subaction(sub_action)
            current_action_id += 1

        if msg.type == msg.SIM:
            self._sim = True
            self._event_pub.publish(String("start_sim"))
            self._running = True
            rospy.sleep(.05)
        if msg.type == msg.EXEC:
            self._sim = False
            self._event_pub.publish(String("start_exec"))
            self._running = True
        self.update_plan()

    def run(self):
        r = rospy.Rate(self._freq)
        while not rospy.is_shutdown():
            self.update_plan()
            r.sleep()

    def next_sub_action(self):
        self._plan.pop(0)
        self._vel_pub.publish(Twist())
        print len(self._plan)


    def update_plan(self):
        print "in plan"
        self.display_path()
        if not self._running:
            return
        if len(self._plan) == 0:
            print "Finished"
            self._event_pub.publish(String("motion_finished"))

            self._running = False
            return

        current_action = self._plan[0]
        if current_action.type == current_action.MOVE:
            if self.go_to_position(current_action.pose):
                self.next_sub_action()
        if current_action.type == current_action.GRASP:
            if self.grasp():
                self.next_sub_action()
        if current_action.type == current_action.RELEASE:
            if self.release():
                self.next_sub_action()

    def bound(self, val, b):
        return min(max(val,-b),b)

    def vectorise(self, val):
        try:
            return [val.x, val.y, val.z, val.w]
        except:
            return [val.x, val.y, val.z]

    def go_to_position(self, goal):
        self._br.sendTransform(self.vectorise(goal.pose.position), self.vectorise(goal.pose.orientation), rospy.Time.now(), "current_goal",REFERENCE_FRAME)
        try:
            ee_frame = ('sim_' if self._sim else '') + 'end_effector'
            print ee_frame
            (trans,rot) = self._tl.lookupTransform(REFERENCE_FRAME, ee_frame, rospy.Time(0))
        except:
            print("fail")
            return
        pose = Pose()
        pose.position.x = goal.pose.position.x-trans[0]
        pose.position.y = goal.pose.position.y-trans[1]
        pose.position.z = goal.pose.position.z-trans[2]

        #From https://answers.ros.org/question/10124/relative-rotation-between-two-quaternions/

        qp = PyKDL.Rotation.Quaternion(rot[0],rot[1],rot[2],rot[3])
        current_angle = qp.GetRPY()

        rot = goal.pose.orientation
        qg = PyKDL.Rotation.Quaternion(rot.x,rot.y,rot.z,rot.w)
        q = qg*qp.Inverse()

        difference_angle = q.GetRPY()
        angle  = list(difference_angle)
        d = current_angle[2] + difference_angle[2]
        if d > np.pi:
            angle[2] -= 2 * np.pi
        if d < -np.pi:
            angle[2] += 2 * np.pi 

        threshold = .005
        dx = math.fabs(pose.position.x)
        dy = math.fabs(pose.position.y)
        dz = math.fabs(pose.position.z)

        if dx < threshold and dy < threshold and dz <threshold and math.fabs(angle[0])<.1 and math.fabs(angle[1])<.1 and math.fabs(angle[2])<.1:
            print "arrived sub point"
            return True
        else:
            twist = Twist()
            max_vel = .15
            P_lin=4
            P_rot=.5
            I=0.000
            if dx < 5 * threshold and dx > threshold/2 and pose.position.x*self._integrator.linear.x >= 0:
                print "filling x"
                self._integrator.linear.x += pose.position.x
            else:
                self._integrator.linear.x = 0
            print "new"
            print dx
            if dy < 5 * threshold and dy > threshold/2 and pose.position.y*self._integrator.linear.y >= 0:
                print "filling y"
                self._integrator.linear.y += pose.position.y
            else:
                self._integrator.linear.y = 0
            print dy
            if dz < 5 * threshold and dz > threshold/2 and pose.position.z*self._integrator.linear.z >= 0:
                print "filling z"
                self._integrator.linear.z += pose.position.z
            else:
                self._integrator.linear.z = 0
            print dz

            twist.linear.x=self.bound(P_lin*pose.position.x+I*self._integrator.linear.x,max_vel)
            twist.linear.y=self.bound(P_lin*pose.position.y+I*self._integrator.linear.y,max_vel)
            twist.linear.z=self.bound(P_lin*pose.position.z+I*self._integrator.linear.z,max_vel)

            print self._integrator.linear.z

            twist.angular.x=self.bound(P_rot*angle[0],6*max_vel)
            twist.angular.y=self.bound(P_rot*angle[1],6*max_vel)
            twist.angular.z=self.bound(P_rot*angle[2],6*max_vel)
            self._vel_pub.publish(twist)
        return False

    def normalise_angle(self, angle):
        return [(a+np.pi)%(2*np.pi)-np.pi for a in angle]

    def grasp(self):
        v = Twist()
        self._vel_pub.publish(v)
        cmd = String()
        cmd.data = "grasp"
        self._command_pub.publish(cmd)
        rospy.sleep(2)
        return True

    def release(self):
        v = Twist()
        self._vel_pub.publish(v)
        cmd = String()
        cmd.data = "release"
        self._command_pub.publish(cmd)
        rospy.sleep(1)
        return True

    def display_path(self):
        path = Path()
        path.header.frame_id = REFERENCE_FRAME
        ee_frame = 'sim_end_effector'
        (trans,rot) = self._tl.lookupTransform(REFERENCE_FRAME, ee_frame, rospy.Time(0))
        EE_pose = PoseStamped()
        EE_pose.pose.position.x = trans[0]
        EE_pose.pose.position.y = trans[1]
        EE_pose.pose.position.z = trans[2]
        EE_pose.pose.orientation.x = rot[0]
        EE_pose.pose.orientation.y = rot[1]
        EE_pose.pose.orientation.z = rot[2]
        EE_pose.pose.orientation.w = rot[3]
        EE_pose.header.frame_id = REFERENCE_FRAME
        path.poses = [EE_pose]
        print len(self._plan)
        for action in self._plan:
            print action.type
            if action.type == action.MOVE:
                path.poses.append(action.pose)
        self._path_pub.publish(path)

 

    def signal_handler(self, signal, frame):
        #publish empty path
        self._vel_pub.publish(Twist())
        sys.exit(0)

if __name__ == "__main__":
    rospy.init_node("planner")
    planner = Planner()
    signal.signal(signal.SIGINT, planner.signal_handler)
    planner.run()

