#!/usr/bin/env python
import rospy
import signal
import sys
import math
import tf
import PyKDL
import copy

from std_msgs.msg import String
from nav_msgs.msg import Path
from relaxed_ik.msg  import EEPoseGoals,JointAngles
from sensor_msgs.msg import JointState

import numpy as np 

REFERENCE_FRAME='panda_link0'

class Simulator(object):
    def __init__(self):
        self._tl = tf.TransformListener()
        self._br = tf.TransformBroadcaster()

        #Rviz value
        self._viz_pub = rospy.Publisher("/viz/joint_states", JointState, queue_size = 5)
        self._panda_pub = rospy.Publisher("/panda/joint_angles", JointAngles, queue_size = 5)
        rospy.sleep(1.) # sleep a bit to make sure the TF cache is filled
        self._event_sub = rospy.Subscriber("/event",String, self.on_event)


        self._r_ik = rospy.get_param('~use_relaxed_ik')
        joint_topic = ("/r_ik_wrapper" if self._r_ik else "/jacob")+"/joint_vel"
        #Simulator State
        #self._angle_sub = rospy.Subscriber("/relaxed_ik/joint_angle_solutions", JointAngles, self.on_solution, queue_size=1)
        self._sim = False
        self._init = False
        self._finger_val = .035
        self._current_joint = [0.0,-0.4,0.0,-2.0,0.0,1.6,0.8,self._finger_val,self._finger_val]
        self._current_velocity = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
        self._freq = 200
        self._vel_sub = rospy.Subscriber(joint_topic, JointAngles, self.on_vel);
        self._command_sub = rospy.Subscriber("/planner/command", String, self.on_command, queue_size = 1)

        #Panda State
        self._panda_angle_sub = rospy.Subscriber("/panda/joint_states", JointState, self.on_state, queue_size=1)

        #Publish init state for the robot
        self.init_states()

    def init_states(self):
        joint = JointState()
        joint.header.stamp = rospy.Time.now()
        joint.name = ["panda_joint1", "panda_joint2","panda_joint3","panda_joint4","panda_joint5","panda_joint6","panda_joint7","panda_finger_joint1","panda_finger_joint2"]
        joint.position = self._current_joint
        self._viz_pub.publish(joint)

    def on_vel(self,msg):
        for i,v in enumerate(msg.angles.data):
            self._current_velocity[i]=v

    def run(self):
        r = rospy.Rate(self._freq)
        while not rospy.is_shutdown():
            self.move()
            r.sleep()

    def move(self):
        if self._sim:
            for i,v in enumerate(self._current_velocity):
                self._current_joint[i]+=v/self._freq
            joint = JointState()
            joint.header.stamp = rospy.Time.now()
            joint.name = ["panda_joint1", "panda_joint2","panda_joint3","panda_joint4","panda_joint5","panda_joint6","panda_joint7","panda_finger_joint1","panda_finger_joint2"]
            joint.position = list(self._current_joint)
            self._viz_pub.publish(joint)
        else:
            desired_joint = copy.deepcopy(self._current_joint)
            for i,v in enumerate(self._current_velocity):
                desired_joint[i]+=80*v/self._freq
            joint = JointAngles()
            joint.angles.data = list(desired_joint)
            self._panda_pub.publish(joint)

 
    def on_event(self, msg):
        cmd = msg.data.split(";")[0]
        if cmd == "motion_finished":
            self._sim = False
        if cmd == "start_sim":
            self._sim = True
        if cmd == "start_exec":
            self._sim = False
    
    def on_command(self, msg):
        print "in"
        if self._sim:
            print "sim"
            if msg.data == "grasp":
                self._finger_val = 0.0
                print self._finger_val
            if msg.data == "release":
                self._finger_val = .035

    def on_state(self, msg):
        if not self._sim:
            self._viz_pub.publish(msg)
            self._finger_val = msg.position[7]
            for i,v in enumerate(msg.position):
                self._current_joint[i]=v
        
    def signal_handler(self, signal, frame):
        sys.exit(0)

if __name__ == "__main__":
    rospy.init_node("simulator")
    simulator = Simulator()
    signal.signal(signal.SIGINT, simulator.signal_handler)
    simulator.run()

