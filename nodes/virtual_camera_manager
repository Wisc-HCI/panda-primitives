#!/usr/bin/env python
import numpy as np
import math
import rospy
import signal
import sys
from geometry_msgs.msg import PoseStamped, Pose, Twist, Quaternion
from sensor_msgs.msg import CameraInfo
import tf
from tf.transformations import *
import copy

REFERENCE_FRAME='panda_link0'

class VirtualCamera(object):
    def __init__(self):
        self._br = tf.TransformBroadcaster()
        self._tl = tf.TransformListener()
        rospy.sleep(.5)

        self._info_pub = rospy.Publisher("/virtual_camera/camera_info",CameraInfo,queue_size=1,latch=True)
        info = CameraInfo()
        info.header.frame_id = "camera1"
        info.height = 480
        info.width = 640
        info.distortion_model = 'plumb_bob'
        info.D = [0]
        info.K = [500.0, 0.0, 320, 0.0, 500.0, 240.0, 0.0, 0.0, 1.0]
        info.R = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
        info.P =  [500.0, 0.0, 320, 0.0, 0.0, 500, 240, 0.0, 0.0, 0.0, 1.0, 0.0]
        info.roi.do_rectify = False 
        self._info_low_res = copy.deepcopy(info)
        info.height = 1536
        info.width = 2048
        info.distortion_model = 'rational_polynomial'
        info.D = [0.5248579382896423, -2.5943498611450195, 0.0008818571805022657, -0.000306136003928259, 1.4509135484695435, 0.4030783474445343, -2.42022705078125, 1.3811763525009155]
        info.K = [976.9754638671875, 0.0, 1018.8711547851562, 0.0, 976.9026489257812, 780.8445434570312, 0.0, 0.0, 1.0]
        info.R = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
        info.P =  [976.9754638671875, 0.0, 1018.8711547851562, 0.0, 0.0, 976.9026489257812, 780.8445434570312, 0.0, 0.0, 0.0, 1.0, 0.0]
        info.roi.do_rectify = False 
        self._info_high_res = copy.deepcopy(info)
        self._info_pub.publish(self._info_high_res)

    def publish_camera_pose(self):
        try:
            (trans,q) = self._tl.lookupTransform("inv_tag_4","client_camera", rospy.Time(0))
            print self._info_low_res.width

            self._info_pub.publish(self._info_low_res)
        except: 
            try:
                (trans,q) = self._tl.lookupTransform("panda_link0","external_rgb_camera_link", rospy.Time(0))
                self._info_pub.publish(self._info_high_res)
                self._br.sendTransform(trans,
                        q,
                        rospy.Time.now(),
                        "camera1",
                        "panda_link0")
            except:
                pass
            return


        q_rot = quaternion_from_euler(0,0, 0,'rxyz')
        q_new = quaternion_multiply(q_rot,q)
        print q_new

        trans = [4*v for v in trans]
        self._br.sendTransform(trans,
                    q_new,
                    rospy.Time.now(),
                    "camera1",
                    "panda_link0")

    def run(self):
        r = rospy.Rate(100)
        while not rospy.is_shutdown():
            self.publish_camera_pose()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('virtual_camera')
    virtual_camera = VirtualCamera()
    signal.signal(signal.SIGINT, virtual_camera.signal_handler)
    virtual_camera.run()
