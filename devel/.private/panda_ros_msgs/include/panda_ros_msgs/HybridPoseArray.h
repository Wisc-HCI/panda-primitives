// Generated by gencpp from file panda_ros_msgs/HybridPoseArray.msg
// DO NOT EDIT!


#ifndef PANDA_ROS_MSGS_MESSAGE_HYBRIDPOSEARRAY_H
#define PANDA_ROS_MSGS_MESSAGE_HYBRIDPOSEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <panda_ros_msgs/HybridPose.h>

namespace panda_ros_msgs
{
template <class ContainerAllocator>
struct HybridPoseArray_
{
  typedef HybridPoseArray_<ContainerAllocator> Type;

  HybridPoseArray_()
    : header()
    , poses()  {
    }
  HybridPoseArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , poses(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::panda_ros_msgs::HybridPose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::panda_ros_msgs::HybridPose_<ContainerAllocator> >> _poses_type;
  _poses_type poses;





  typedef boost::shared_ptr< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> const> ConstPtr;

}; // struct HybridPoseArray_

typedef ::panda_ros_msgs::HybridPoseArray_<std::allocator<void> > HybridPoseArray;

typedef boost::shared_ptr< ::panda_ros_msgs::HybridPoseArray > HybridPoseArrayPtr;
typedef boost::shared_ptr< ::panda_ros_msgs::HybridPoseArray const> HybridPoseArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator1> & lhs, const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator1> & lhs, const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e32ea78c109a0ac593e0b2d9d737c8d6";
  }

  static const char* value(const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe32ea78c109a0ac5ULL;
  static const uint64_t static_value2 = 0x93e0b2d9d737c8d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_ros_msgs/HybridPoseArray";
  }

  static const char* value(const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"panda_ros_msgs/HybridPose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: panda_ros_msgs/HybridPose\n"
"# Pose\n"
"geometry_msgs/Pose pose\n"
"\n"
"# Selection vector [6 (drop rotation for now)]\n"
"uint8[] sel_vector\n"
"\n"
"# Desired Wrench\n"
"geometry_msgs/Wrench wrench\n"
"\n"
"# Constraint Frame (might drop)\n"
"geometry_msgs/Quaternion constraint_frame\n"
"\n"
"# Header\n"
"Header header\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HybridPoseArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::panda_ros_msgs::HybridPose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_ROS_MSGS_MESSAGE_HYBRIDPOSEARRAY_H
