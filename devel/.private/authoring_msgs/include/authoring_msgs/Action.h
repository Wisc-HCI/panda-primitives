// Generated by gencpp from file authoring_msgs/Action.msg
// DO NOT EDIT!


#ifndef AUTHORING_MSGS_MESSAGE_ACTION_H
#define AUTHORING_MSGS_MESSAGE_ACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <panda_ros_msgs/HybridPoseArray.h>
#include <panda_ros_msgs/HybridPose.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Twist.h>

namespace authoring_msgs
{
template <class ContainerAllocator>
struct Action_
{
  typedef Action_<ContainerAllocator> Type;

  Action_()
    : type(0)
    , sim()
    , finished()
    , poses()
    , pose()
    , joint_pose()
    , item()
    , velocity()  {
    }
  Action_(const ContainerAllocator& _alloc)
    : type(0)
    , sim(_alloc)
    , finished(_alloc)
    , poses(_alloc)
    , pose(_alloc)
    , joint_pose(_alloc)
    , item(_alloc)
    , velocity(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _sim_type;
  _sim_type sim;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _finished_type;
  _finished_type finished;

   typedef  ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator>  _poses_type;
  _poses_type poses;

   typedef  ::panda_ros_msgs::HybridPose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_pose_type;
  _joint_pose_type joint_pose;

   typedef  ::std_msgs::String_<ContainerAllocator>  _item_type;
  _item_type item;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PICK)
  #undef PICK
#endif
#if defined(_WIN32) && defined(SCREW)
  #undef SCREW
#endif
#if defined(_WIN32) && defined(PLACE)
  #undef PLACE
#endif
#if defined(_WIN32) && defined(WIPE)
  #undef WIPE
#endif
#if defined(_WIN32) && defined(MOVE_OBJECT)
  #undef MOVE_OBJECT
#endif
#if defined(_WIN32) && defined(RESET)
  #undef RESET
#endif
#if defined(_WIN32) && defined(MOVE)
  #undef MOVE
#endif
#if defined(_WIN32) && defined(MOVE_TO_CONTACT)
  #undef MOVE_TO_CONTACT
#endif
#if defined(_WIN32) && defined(GRASP)
  #undef GRASP
#endif
#if defined(_WIN32) && defined(RELEASE)
  #undef RELEASE
#endif
#if defined(_WIN32) && defined(VIEW)
  #undef VIEW
#endif
#if defined(_WIN32) && defined(INSPECT)
  #undef INSPECT
#endif
#if defined(_WIN32) && defined(WAIT)
  #undef WAIT
#endif
#if defined(_WIN32) && defined(PUSH)
  #undef PUSH
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(INSERT)
  #undef INSERT
#endif
#if defined(_WIN32) && defined(MOVE_FORCE)
  #undef MOVE_FORCE
#endif
#if defined(_WIN32) && defined(UNSCREW)
  #undef UNSCREW
#endif
#if defined(_WIN32) && defined(MOVE_ANGLE)
  #undef MOVE_ANGLE
#endif
#if defined(_WIN32) && defined(PULL)
  #undef PULL
#endif
#if defined(_WIN32) && defined(CAMERA_VELOCITY)
  #undef CAMERA_VELOCITY
#endif
#if defined(_WIN32) && defined(MOVE_UNKNOWN)
  #undef MOVE_UNKNOWN
#endif
#if defined(_WIN32) && defined(PULL_DRAWER)
  #undef PULL_DRAWER
#endif
#if defined(_WIN32) && defined(BIAS_FORCES)
  #undef BIAS_FORCES
#endif
#if defined(_WIN32) && defined(DROP)
  #undef DROP
#endif
#if defined(_WIN32) && defined(RELEASE_FORCE)
  #undef RELEASE_FORCE
#endif

  enum {
    PICK = 0u,
    SCREW = 1u,
    PLACE = 2u,
    WIPE = 3u,
    MOVE_OBJECT = 4u,
    RESET = 5u,
    MOVE = 6u,
    MOVE_TO_CONTACT = 7u,
    GRASP = 8u,
    RELEASE = 9u,
    VIEW = 10u,
    INSPECT = 11u,
    WAIT = 12u,
    PUSH = 13u,
    STOP = 14u,
    INSERT = 15u,
    MOVE_FORCE = 16u,
    UNSCREW = 17u,
    MOVE_ANGLE = 18u,
    PULL = 19u,
    CAMERA_VELOCITY = 20u,
    MOVE_UNKNOWN = 21u,
    PULL_DRAWER = 22u,
    BIAS_FORCES = 23u,
    DROP = 24u,
    RELEASE_FORCE = 25u,
  };


  typedef boost::shared_ptr< ::authoring_msgs::Action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::authoring_msgs::Action_<ContainerAllocator> const> ConstPtr;

}; // struct Action_

typedef ::authoring_msgs::Action_<std::allocator<void> > Action;

typedef boost::shared_ptr< ::authoring_msgs::Action > ActionPtr;
typedef boost::shared_ptr< ::authoring_msgs::Action const> ActionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::authoring_msgs::Action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::authoring_msgs::Action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::authoring_msgs::Action_<ContainerAllocator1> & lhs, const ::authoring_msgs::Action_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.sim == rhs.sim &&
    lhs.finished == rhs.finished &&
    lhs.poses == rhs.poses &&
    lhs.pose == rhs.pose &&
    lhs.joint_pose == rhs.joint_pose &&
    lhs.item == rhs.item &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::authoring_msgs::Action_<ContainerAllocator1> & lhs, const ::authoring_msgs::Action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace authoring_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::authoring_msgs::Action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::authoring_msgs::Action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::authoring_msgs::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::authoring_msgs::Action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::authoring_msgs::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::authoring_msgs::Action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::authoring_msgs::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41fc65066a6b05ed16658136c65c754d";
  }

  static const char* value(const ::authoring_msgs::Action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41fc65066a6b05edULL;
  static const uint64_t static_value2 = 0x16658136c65c754dULL;
};

template<class ContainerAllocator>
struct DataType< ::authoring_msgs::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "authoring_msgs/Action";
  }

  static const char* value(const ::authoring_msgs::Action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::authoring_msgs::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Types\n"
"uint8 PICK=0\n"
"uint8 SCREW=1\n"
"uint8 PLACE=2\n"
"uint8 WIPE=3\n"
"uint8 MOVE_OBJECT=4\n"
"uint8 RESET=5\n"
"uint8 MOVE=6\n"
"uint8 MOVE_TO_CONTACT=7\n"
"uint8 GRASP=8\n"
"uint8 RELEASE=9\n"
"uint8 VIEW=10\n"
"uint8 INSPECT=11\n"
"uint8 WAIT=12\n"
"uint8 PUSH=13\n"
"uint8 STOP=14\n"
"uint8 INSERT=15\n"
"uint8 MOVE_FORCE=16\n"
"uint8 UNSCREW=17\n"
"uint8 MOVE_ANGLE=18\n"
"uint8 PULL=19\n"
"uint8 CAMERA_VELOCITY=20\n"
"uint8 MOVE_UNKNOWN=21\n"
"uint8 PULL_DRAWER=22\n"
"uint8 BIAS_FORCES=23\n"
"uint8 DROP=24\n"
"uint8 RELEASE_FORCE=25\n"
"\n"
"# Type\n"
"uint8 type\n"
"\n"
"std_msgs/Bool sim\n"
"\n"
"std_msgs/Bool finished\n"
"\n"
"# HybridPoseArray (for high level planning)\n"
"panda_ros_msgs/HybridPoseArray poses\n"
"\n"
"# HybridPose (for low level planning)\n"
"panda_ros_msgs/HybridPose pose\n"
"\n"
"# JointState (for going to fixed position, example reset)\n"
"float64[] joint_pose\n"
"\n"
"# Item\n"
"std_msgs/String item\n"
"\n"
"# Velocity\n"
"geometry_msgs/Twist velocity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: panda_ros_msgs/HybridPoseArray\n"
"Header header\n"
"panda_ros_msgs/HybridPose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: panda_ros_msgs/HybridPose\n"
"# Pose\n"
"geometry_msgs/Pose pose\n"
"\n"
"# Selection vector [6 (drop rotation for now)]\n"
"uint8[] sel_vector\n"
"\n"
"# Desired Wrench\n"
"geometry_msgs/Wrench wrench\n"
"\n"
"# Constraint Frame (might drop)\n"
"geometry_msgs/Quaternion constraint_frame\n"
"\n"
"# Header\n"
"Header header\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::authoring_msgs::Action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::authoring_msgs::Action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.sim);
      stream.next(m.finished);
      stream.next(m.poses);
      stream.next(m.pose);
      stream.next(m.joint_pose);
      stream.next(m.item);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::authoring_msgs::Action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::authoring_msgs::Action_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "sim: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.sim);
    s << indent << "finished: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.finished);
    s << indent << "poses: ";
    s << std::endl;
    Printer< ::panda_ros_msgs::HybridPoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.poses);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::panda_ros_msgs::HybridPose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "joint_pose[]" << std::endl;
    for (size_t i = 0; i < v.joint_pose.size(); ++i)
    {
      s << indent << "  joint_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_pose[i]);
    }
    s << indent << "item: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.item);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTHORING_MSGS_MESSAGE_ACTION_H
